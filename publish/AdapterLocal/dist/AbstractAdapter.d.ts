import { AdapterConfig, FileBufferParams, FilePathParams, FileStreamParams, IStorage, Options, StreamOptions, ResultObject, ResultObjectBoolean, ResultObjectBuckets, ResultObjectFiles, ResultObjectNumber, ResultObjectStream } from "./types";
export declare abstract class AbstractAdapter implements IStorage {
    protected _type: string;
    protected _config: AdapterConfig | null;
    protected _configError: string | null;
    protected _client: any;
    constructor(config: string | AdapterConfig);
    get type(): string;
    get config(): AdapterConfig;
    get configError(): string;
    get serviceClient(): any;
    getType(): string;
    getConfigError(): string;
    getConfiguration(): AdapterConfig;
    getServiceClient(): any;
    addFileFromPath(params: FilePathParams): Promise<ResultObject>;
    addFileFromBuffer(params: FileBufferParams): Promise<ResultObject>;
    addFileFromStream(params: FileStreamParams): Promise<ResultObject>;
    abstract addFile(paramObject: FilePathParams | FileBufferParams | FileStreamParams): Promise<ResultObject>;
    abstract createBucket(name: string, options?: Options): Promise<ResultObject>;
    abstract clearBucket(name: string): Promise<ResultObject>;
    abstract deleteBucket(name: string): Promise<ResultObject>;
    abstract listBuckets(): Promise<ResultObjectBuckets>;
    abstract getFileAsStream(bucketName: string, fileName: string, options?: StreamOptions): Promise<ResultObjectStream>;
    abstract getFileAsURL(bucketName: string, fileName: string, options?: Options): Promise<ResultObject>;
    abstract removeFile(bucketName: string, fileName: string, allVersions?: boolean): Promise<ResultObject>;
    abstract listFiles(bucketName: string, maxFiles: number): Promise<ResultObjectFiles>;
    abstract sizeOf(bucketName: string, fileName: string): Promise<ResultObjectNumber>;
    abstract fileExists(bucketName: string, fileName: string): Promise<ResultObjectBoolean>;
    abstract bucketExists(name: string): Promise<ResultObjectBoolean>;
}
